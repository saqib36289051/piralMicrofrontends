"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = exports.isInDirectory = exports.toFile = exports.asScript = exports.asJson = exports.toAbsolute = exports.ls = exports.mk = exports.isFile = void 0;
const chokidar = __importStar(require("chokidar"));
const fs_1 = require("fs");
const path_1 = require("path");
function isFile(file) {
    return (0, fs_1.statSync)(file).isFile();
}
exports.isFile = isFile;
function mk(directory) {
    if (!(0, fs_1.existsSync)(directory)) {
        directory.split(path_1.sep).reduce((parentDir, childDir) => {
            const curDir = (0, path_1.resolve)(parentDir, childDir);
            if (!(0, fs_1.existsSync)(curDir)) {
                (0, fs_1.mkdirSync)(curDir);
            }
            return curDir;
        }, path_1.sep);
        return true;
    }
    return false;
}
exports.mk = mk;
function ls(directory) {
    if ((0, fs_1.existsSync)(directory)) {
        return (0, fs_1.readdirSync)(directory);
    }
    return [];
}
exports.ls = ls;
function toAbsolute(directory) {
    return (file) => (0, path_1.join)(directory, file);
}
exports.toAbsolute = toAbsolute;
function asJson(file, defaultValue) {
    if ((0, fs_1.existsSync)(file)) {
        try {
            const content = (0, fs_1.readFileSync)(file, 'utf8');
            return JSON.parse(content);
        }
        catch (_a) {
            return defaultValue;
        }
    }
    return defaultValue;
}
exports.asJson = asJson;
function asScript(file) {
    if ((0, fs_1.existsSync)(file)) {
        const key = require.resolve(file);
        delete require.cache[key];
        return require(file);
    }
    return () => { };
}
exports.asScript = asScript;
function toFile(file, obj) {
    const directory = (0, path_1.dirname)(file);
    mk(directory);
    (0, fs_1.writeFileSync)(file, JSON.stringify(obj));
    return file;
}
exports.toFile = toFile;
function isInDirectory(fn, dir) {
    const rel = (0, path_1.relative)(dir, fn);
    return !!rel && !rel.startsWith('..') && !(0, path_1.isAbsolute)(rel);
}
exports.isInDirectory = isInDirectory;
function installWatcher(directory, pattern, loadFile, updateFile, deleteFile) {
    mk(directory);
    return chokidar
        .watch(pattern, { cwd: directory })
        .on('change', updateFile)
        .on('add', loadFile)
        .on('unlink', deleteFile);
}
function watchSingle(directory, pattern, callback, watched) {
    const getPosition = (fn) => {
        const idx = watched.indexOf(fn);
        if (idx === -1) {
            let i = 0;
            while (i < watched.length) {
                const w = watched[i];
                if (w.localeCompare(fn) > 0) {
                    break;
                }
                i++;
            }
            watched.splice(i, 0, fn);
            return i;
        }
        return idx;
    };
    const updateFile = (file) => {
        const fn = (0, path_1.resolve)(directory, file);
        callback('update', fn, getPosition(fn));
    };
    const deleteFile = (file) => {
        const fn = (0, path_1.resolve)(directory, file);
        const idx = watched.indexOf(fn);
        idx !== -1 && watched.splice(idx, 1);
        callback('delete', fn, -1);
    };
    const loadFile = (file) => {
        const fn = (0, path_1.resolve)(directory, file);
        callback('create', fn, getPosition(fn));
    };
    const w = installWatcher(directory, pattern, loadFile, updateFile, deleteFile);
    return {
        directory,
        close() {
            const dirs = w.getWatched();
            for (const dir of Object.keys(dirs)) {
                for (const file of dirs[dir]) {
                    const fn = (0, path_1.resolve)(directory, dir, file);
                    const idx = watched.indexOf(fn);
                    idx !== -1 && watched.splice(idx, 1);
                    callback('delete', fn, -1);
                }
            }
            w.close();
        },
    };
}
function watch(directory, pattern, callback, watched = []) {
    if (Array.isArray(directory)) {
        const ws = directory.map((dir) => watchSingle(dir, pattern, callback, watched));
        return {
            get directories() {
                return ws.map((w) => w.directory);
            },
            set directories(value) {
                const added = [];
                for (let i = ws.length; i--;) {
                    const w = ws[i];
                    let remove = true;
                    for (const v of value) {
                        if (w.directory === v) {
                            remove = false;
                            break;
                        }
                    }
                    if (remove) {
                        ws.splice(i, 1);
                        w.close();
                    }
                }
                for (const v of value) {
                    let add = true;
                    for (const w of ws) {
                        if (w.directory === v) {
                            add = false;
                            break;
                        }
                    }
                    if (add) {
                        added.push(watchSingle(v, pattern, callback, watched));
                    }
                }
                ws.push(...added);
            },
            close() {
                ws.forEach((w) => w.close());
            },
        };
    }
    else if (typeof directory === 'string') {
        return watch([directory], pattern, callback, watched);
    }
}
exports.watch = watch;
