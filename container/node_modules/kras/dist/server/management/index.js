"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withManagement = void 0;
const client_1 = require("./client");
const broadcast_1 = require("./broadcast");
const files_1 = require("./files");
const login_1 = require("./login");
const basics_1 = require("./basics");
const logs_1 = require("./logs");
const settings_1 = require("./settings");
const overview_1 = require("./overview");
const injectors_1 = require("./injectors");
function withManagement(server, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const api = config.api;
        if (api !== false) {
            const protect = (0, login_1.getAuth)(server, config);
            const client = yield (0, client_1.clientOf)(server, config);
            server.at(api).get(client);
            server.at(api, 'login').post((0, login_1.userLogin)(server, config));
            protect(server.at(api, 'config')).get((0, basics_1.configOf)(server, config)).put((0, basics_1.updateClient)(server, config));
            protect(server.at(api, 'logs')).get((0, logs_1.recentLogsOf)(server)).delete((0, logs_1.allLogsOf)(server)).feed((0, logs_1.liveLogs)(server));
            protect(server.at(api, 'broadcast')).post((0, broadcast_1.broadcastAt)(server));
            protect(server.at(api, 'data')).get((0, overview_1.overview)(server)).feed((0, overview_1.liveData)(server));
            protect(server.at(api, 'data', 'request', ':id')).get((0, overview_1.requestDetails)(server));
            protect(server.at(api, 'data', 'message', ':id')).get((0, overview_1.messageDetails)(server));
            protect(server.at(api, 'data', 'error', ':id')).get((0, overview_1.errorDetails)(server));
            protect(server.at(api, 'file', ':name')).get((0, files_1.readFile)(server)).put((0, files_1.saveFile)(server));
            protect(server.at(api, 'settings')).get((0, settings_1.readSettings)(server)).put((0, settings_1.saveSettings)(server));
            protect(server.at(api, 'settings', 'file')).get((0, settings_1.downloadSettings)(server, config));
            protect(server.at(api, 'injector')).get((0, injectors_1.readInjectorsSettings)(server));
            protect(server.at(api, 'injector', ':name')).get((0, injectors_1.readInjectorSettings)(server)).put((0, injectors_1.saveInjectorSettings)(server));
        }
    });
}
exports.withManagement = withManagement;
