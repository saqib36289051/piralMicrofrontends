"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runFromCli = exports.connectToCli = exports.runWithKras = exports.withKras = exports.runKras = exports.buildKrasWithCli = exports.buildKras = exports.readKrasConfig = exports.MockServer = void 0;
const chalk = __importStar(require("chalk"));
const os_1 = require("os");
const path_1 = require("path");
const core_1 = require("./core");
const info_1 = require("./info");
const config_1 = require("./core/config");
const injectors_1 = require("./injectors");
const management_1 = require("./management");
const helpers_1 = require("./helpers");
function info(message) {
    return message && message.length > 50 ? message.substr(0, 47) + ' ...' : message;
}
function isDebug(logLevel) {
    // level is debug, i.e., strongest level already
    return logLevel === 'debug';
}
function isInfo(logLevel) {
    // level is not error, i.e., at least info is given
    return logLevel !== 'error';
}
function isError(logLevel) {
    // no matter what the level is, the minimum level is always error
    return !!logLevel;
}
function disposeInjector(injector) {
    if (injector && typeof injector.dispose === 'function') {
        injector.dispose();
    }
}
function isUnique(value, index, self) {
    // checks if the value is truthy and was not seen beforehand
    return value && self.indexOf(value) === index;
}
class MockServer extends core_1.MockServerCore {
    constructor(config) {
        super(config);
        this.config = config;
        this.injectors = [];
        this.middlewares = [];
        this.logs = [];
        this.logLevel = config.logLevel || 'error';
        this.on('error', (e) => this.log('error', e));
        if (config.api === false) {
            this.recorder.disable();
        }
    }
    setup() {
        const _super = Object.create(null, {
            setup: { get: () => super.setup }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const config = this.config;
            yield _super.setup.call(this);
            yield (0, management_1.withManagement)(this, config);
            yield (0, injectors_1.withInjectors)(this, config);
            yield (0, helpers_1.withMiddlewares)(this, config);
            yield (0, helpers_1.withFiles)(this, config);
        });
    }
    stop() {
        const _super = Object.create(null, {
            stop: { get: () => super.stop }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.stop.call(this);
            this.injectors.forEach(disposeInjector);
        });
    }
    log(type, data) {
        const item = {
            type,
            data,
            time: new Date(),
        };
        this.logs.push(item);
        this.emit('logged', item);
    }
}
exports.MockServer = MockServer;
function readKrasConfig(options, ...files) {
    const dir = options.dir ? (0, path_1.resolve)(info_1.currentDir, options.dir) : info_1.currentDir;
    const configurations = files
        .filter(Boolean)
        .map((file) => (0, path_1.resolve)(dir, file))
        .filter(isUnique)
        .map((path) => (0, config_1.readConfiguration)(path));
    return (0, config_1.mergeConfiguration)(options, ...configurations);
}
exports.readKrasConfig = readKrasConfig;
function buildKras(config) {
    const options = (0, config_1.buildConfiguration)(config);
    return new MockServer(options);
}
exports.buildKras = buildKras;
function buildKrasWithCli(config) {
    const server = buildKras(config);
    connectToCli(server, config.api !== false);
    return server;
}
exports.buildKrasWithCli = buildKrasWithCli;
function runKras(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const server = buildKras(config);
        yield server.start();
        return server;
    });
}
exports.runKras = runKras;
function withKras(config) {
    return (callback) => {
        const server = buildKras(config);
        (0, helpers_1.configureHandler)(server, config);
        return (0, helpers_1.runWith)(server, callback);
    };
}
exports.withKras = withKras;
function runWithKras(cb, config) {
    return withKras(config)(cb);
}
exports.runWithKras = runWithKras;
function connectToCli(server, canManage = true) {
    server.on('open', (svc) => {
        const port = chalk.green(svc.port);
        const protocol = svc.protocol;
        const server = `${protocol}://localhost:${port}`;
        console.log(`Server listening at port ${port} (${protocol.toUpperCase()}).`);
        if (canManage) {
            const manage = svc.routes[0] || '/manage';
            console.log(`Management app: ${server}${manage}`);
        }
    });
    server.on('close', (svc) => {
        console.log(`Connection to server closed.`);
    });
    server.on('user-connected', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} + ${chalk.white(info(msg.id))}`);
        }
    });
    server.on('user-disconnected', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} - ${chalk.white(info(msg.id))}`);
        }
    });
    server.on('message', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green('WS')} << ${chalk.white(info(msg.content))}`);
        }
    });
    server.on('broadcast', (msg) => {
        if (isInfo(server.logLevel)) {
            console.log(`${chalk.green('WS')} >> ${chalk.white(info(msg.content))}`);
        }
    });
    server.on('missing', (req) => {
        if (isError(server.logLevel)) {
            console.log(`${chalk.yellow(req.method)} ${chalk.gray(req.target)}${chalk.white(req.url)}`);
        }
    });
    server.on('request', (req) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.green(req.method)} ${chalk.gray(req.target)}${chalk.white(req.url)}`);
        }
    });
    server.on('error', (msg) => {
        if (isError(server.logLevel)) {
            console.log(`${chalk.red('ERR')} ${chalk.white(msg)}`);
        }
    });
    server.on('debug', (msg) => {
        if (isDebug(server.logLevel)) {
            console.log(`${chalk.yellow('DBG')} ${chalk.white(msg)}`);
        }
    });
    server.on('info', (msg) => {
        if (isInfo(server.logLevel)) {
            console.log(`${chalk.bgWhite(chalk.black('INF'))} ${chalk.white(msg)}`);
        }
    });
}
exports.connectToCli = connectToCli;
function runFromCli(options, rcfile) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = readKrasConfig(options, (0, path_1.resolve)((0, os_1.homedir)(), info_1.krasrc), (0, path_1.resolve)(info_1.currentDir, info_1.krasrc), rcfile);
        const server = buildKrasWithCli(config);
        console.log(`Starting kras v${info_1.version} ...`);
        yield server.start();
        return server;
    });
}
exports.runFromCli = runFromCli;
