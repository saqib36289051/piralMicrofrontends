"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const path_1 = require("path");
const common_1 = require("./common");
const bundler_run_1 = require("./bundler-run");
const fs_1 = require("fs");
function transformIndexHtml(html) {
    return html
        .replace(/<script\s+src\s*=\s*"\.\/(.*?)"\s*>/gm, '<script src="./$1" type=module>')
        .replace(/<script\s+src\s*=\s*'\.\/(.*?)'\s*>/gm, "<script src='./$1' type=module>")
        .replace(/<script\s*>/gm, '<script type=module>');
}
function getConfigFile(root) {
    const fileNames = ['vite.config.ts', 'vite.config.js', 'vite.config.mts', 'vite.config.mjs'];
    const files = (0, fs_1.readdirSync)(root);
    for (const name of fileNames) {
        if (files.includes(name)) {
            return (0, path_1.resolve)(root, name);
        }
    }
    return undefined;
}
const handler = {
    create(options) {
        const rootDir = (0, path_1.dirname)(options.entryFiles);
        const newPlugins = [];
        const config = (0, common_1.createCommonConfig)(rootDir, options.outDir, options.emulator, options.sourceMaps, options.minify, {
            DEBUG_PIRAL: process.env.DEBUG_PIRAL || (process.env.DEBUG_PIRAL = ''),
            DEBUG_PILET: process.env.DEBUG_PILET || (process.env.DEBUG_PILET = ''),
            SHARED_DEPENDENCIES: JSON.stringify(options.externals.join(',')),
        });
        if (options.hmr) {
            newPlugins.push({
                name: 'hmr-plugin',
                generateBundle(_, bundle) {
                    if (bundle) {
                        Object.keys(bundle).forEach((file) => {
                            const asset = bundle[file];
                            if (asset.type === 'chunk' && asset.isEntry) {
                                asset.code = `(() => new WebSocket(location.origin.replace('http', 'ws')+"/$events").onmessage = () => location.reload())();${asset.code}`;
                            }
                        });
                    }
                },
            });
        }
        const configFile = getConfigFile(options.root);
        const indexHtml = (0, path_1.resolve)(rootDir, 'index.html');
        const content = (0, fs_1.readFileSync)(indexHtml, 'utf8');
        (0, fs_1.writeFileSync)(indexHtml, transformIndexHtml(content), 'utf8');
        return (0, bundler_run_1.runVite)({
            ...config,
            configFile,
            plugins: [...config.plugins, ...newPlugins],
            debug: options.watch,
            outFile: options.outFile,
        });
    },
};
exports.create = handler.create;
//# sourceMappingURL=piral.js.map