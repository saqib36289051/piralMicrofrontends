"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.fail = exports.logSuspend = exports.logReset = exports.progress = exports.logFail = exports.logWarn = exports.logDone = exports.logVerbose = exports.logDebug = exports.logInfo = exports.setLogLevel = exports.getLogLevel = void 0;
const messages = __importStar(require("../messages"));
const util_1 = require("util");
const external_1 = require("../external");
const types_1 = require("../types");
let currentProgress = undefined;
let logLevel = types_1.LogLevels.info;
let instance = (0, external_1.ora)();
function getLogLevel() {
    return logLevel;
}
exports.getLogLevel = getLogLevel;
function setLogLevel(value) {
    logLevel = value;
}
exports.setLogLevel = setLogLevel;
function logInfo(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    instance.info(msg);
    return msg;
}
exports.logInfo = logInfo;
function logDebug(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    if (logLevel >= types_1.LogLevels.debug) {
        instance.info(msg);
    }
    return msg;
}
exports.logDebug = logDebug;
function logVerbose(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    if (logLevel >= types_1.LogLevels.verbose) {
        instance.info(msg);
    }
    return msg;
}
exports.logVerbose = logVerbose;
function logDone(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    instance.succeed(msg);
    return msg;
}
exports.logDone = logDone;
function logWarn(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    instance.warn(msg);
    return msg;
}
exports.logWarn = logWarn;
function logFail(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    instance.fail(msg);
    return msg;
}
exports.logFail = logFail;
function progress(message, ...args) {
    const msg = (0, util_1.format)(message, ...args);
    instance.start(msg);
    currentProgress = msg;
}
exports.progress = progress;
function logReset() {
    instance.stop();
}
exports.logReset = logReset;
function logSuspend() {
    logReset();
    return () => instance.start(currentProgress);
}
exports.logSuspend = logSuspend;
function fail(type, ...args) {
    const message = log(type, ...args);
    const error = new Error(message);
    error.logged = true;
    throw error;
}
exports.fail = fail;
function log(type, ...args) {
    const [level, code, message] = messages[type].apply(this, args);
    switch (level) {
        case types_1.LogLevels.error:
            return logFail(`[%s] ${message}`, code);
        case types_1.LogLevels.warning:
            return logWarn(`[%s] ${message}`, code);
        case types_1.LogLevels.info:
            return logInfo(`[%s] ${message}`, code);
        case types_1.LogLevels.debug:
            return logDebug(`[%s] ${message}`, code);
        case types_1.LogLevels.verbose:
            return logVerbose(`[%s] ${message}`, code);
    }
}
exports.log = log;
//# sourceMappingURL=log.js.map