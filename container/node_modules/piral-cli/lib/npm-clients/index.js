"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectClients = exports.isWrapperClient = exports.clients = void 0;
const path_1 = require("path");
const io_1 = require("../common/io");
const lerna = __importStar(require("./lerna"));
const npm = __importStar(require("./npm"));
const pnp = __importStar(require("./pnp"));
const pnpm = __importStar(require("./pnpm"));
const rush = __importStar(require("./rush"));
const yarn = __importStar(require("./yarn"));
const bun = __importStar(require("./bun"));
exports.clients = {
    lerna,
    npm,
    pnp,
    pnpm,
    rush,
    yarn,
    bun,
};
const directClients = ['npm', 'pnp', 'yarn', 'pnpm', 'bun'];
function isWrapperClient(client) {
    return !directClients.includes(client);
}
exports.isWrapperClient = isWrapperClient;
async function detectClients(root) {
    const packageJson = await (0, io_1.findFile)((0, path_1.resolve)(root, '..'), 'package.json');
    const stopDir = packageJson ? (0, path_1.dirname)(packageJson) : undefined;
    return await Promise.all(Object.keys(exports.clients).map(async (client) => {
        const result = await exports.clients[client].detectClient(root, stopDir);
        return {
            client,
            result,
        };
    }));
}
exports.detectClients = detectClients;
//# sourceMappingURL=index.js.map