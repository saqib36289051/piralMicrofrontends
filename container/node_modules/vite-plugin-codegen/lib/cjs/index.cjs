var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => codegen
});
module.exports = __toCommonJS(src_exports);
var import_module = require("module");
var requireModule = (0, import_module.createRequire)(__filename);
function reloadGenerator(name) {
  const path = requireModule.resolve(name);
  delete requireModule.cache[path];
  return requireModule(name);
}
function codegen(options = { outDir: "dist", rootDir: process.cwd() }) {
  return {
    name: "codegen",
    resolveId(source) {
      if (source.endsWith(".codegen")) {
        return source;
      }
      return null;
    },
    load(name) {
      if (name.endsWith(".codegen")) {
        const generator = reloadGenerator(name);
        return generator.call({
          name,
          options,
          addDependency: (file) => {
            this.addWatchFile(file);
          }
        });
      }
      return null;
    }
  };
}
//# sourceMappingURL=index.cjs.map
