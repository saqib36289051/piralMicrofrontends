#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = __importStar(require("yargs"));
const server_1 = require("./server");
const argv = yargs
    .usage('Usage: $0 [options]')
    .string('c')
    .alias('c', 'config')
    .describe('c', `Sets the configuration file to use, by default ${server_1.krasrc}`)
    .number('p')
    .alias('p', 'port')
    .describe('p', `Sets the port of the server, by default ${server_1.defaultConfig.port}`)
    .string('n')
    .alias('n', 'name')
    .describe('n', `Sets the name of the server, by default ${server_1.defaultConfig.name}`)
    .string('d')
    .alias('d', 'dir')
    .describe('d', `Sets the base directory of the server, by default ${server_1.defaultConfig.directory}`)
    .string('host')
    .describe('host', `Sets the host binding of the server, by default ${server_1.defaultConfig.host}`)
    .string('cert')
    .describe('cert', `Sets the certificate of the server, by default ${server_1.defaultConfig.ssl.cert}`)
    .string('key')
    .describe('key', `Sets the key of the server, by default ${server_1.defaultConfig.ssl.key}`)
    .alias('l', 'log-level')
    .describe('l', `Sets the log level of the application, by default ${server_1.defaultConfig.logLevel}`)
    .choices('l', ['info', 'debug', 'error'])
    .boolean('skip-api')
    .describe('skip-api', 'If set avoids creating the management API endpoint')
    .option('map', {})
    .describe('map', 'Sets the different mappings, e.g., "--map./=https://httpbin.org"; can be used multiple times')
    .default('map', {})
    .version()
    .help('h')
    .alias('h', 'help')
    .describe('h', 'Shows the argument descriptions')
    .epilog(`Copyright (c) 2018 - 2022 ${server_1.author}`).argv;
(0, server_1.runFromCli)({
    port: argv.p,
    host: argv.host,
    name: argv.n,
    logs: argv.l,
    cert: argv.cert,
    key: argv.key,
    dir: argv.d,
    skipApi: argv['skip-api'],
    initial: {
        map: argv.map,
        injectorDirs: [argv.d, process.cwd()],
        injectors: {
            script: {
                active: true,
            },
            har: {
                active: true,
                delay: false,
            },
            json: {
                active: true,
                randomize: true,
            },
            proxy: {
                active: true,
            },
            store: {
                active: false,
            },
        },
    },
}, argv.c).catch((err) => {
    console.error(err);
    process.exit(1);
});
