"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withFiles = exports.getClient = void 0;
const send_1 = __importDefault(require("send"));
const path_1 = require("path");
const fs_1 = require("fs");
const info_1 = require("../info");
// this only exists to trick "ncc" -> otherwise it tries to resolve it
// directly at compile-time
const indexHtml = [0].map(() => 'index.html').pop();
function checkExists(dir) {
    return new Promise((resolve) => (0, fs_1.exists)(dir, resolve));
}
function getClient(cwd, path) {
    return __awaiter(this, void 0, void 0, function* () {
        const fullPath = (0, path_1.resolve)(cwd, path);
        if (!(yield checkExists(fullPath))) {
            const indexPath = (0, path_1.resolve)(fullPath, indexHtml);
            if (yield checkExists(indexPath)) {
                return indexPath;
            }
            try {
                const mainPath = require.resolve(path, {
                    paths: [info_1.distDir, process.cwd(), cwd],
                });
                const mainDir = (0, path_1.dirname)(mainPath);
                return (0, path_1.resolve)(mainDir, indexHtml);
            }
            catch (_a) { }
        }
        return fullPath;
    });
}
exports.getClient = getClient;
function withFiles(server, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const api = config.api;
        if (api !== false) {
            const prefix = `${api}/static/`;
            const client = yield getClient(config.directory, config.client);
            const root = (0, path_1.dirname)(client);
            const options = { root };
            server.at(api, 'static/*').get((req, res) => {
                const path = req.url.substring(prefix.length);
                (0, send_1.default)(req, path, options).pipe(res);
            });
        }
    });
}
exports.withFiles = withFiles;
