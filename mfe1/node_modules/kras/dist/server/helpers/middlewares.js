"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withMiddlewares = void 0;
const path_1 = require("path");
const info_1 = require("../info");
function findMiddleware(modulePath) {
    try {
        return require(modulePath);
    }
    catch (e) {
        return undefined;
    }
}
function findFirstMiddleware(paths) {
    for (const path of paths) {
        const creator = findMiddleware(path);
        if (creator) {
            return creator;
        }
    }
    return undefined;
}
function createMiddleware(server, config, baseDir, source, direction, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const creator = findFirstMiddleware([source, (0, path_1.resolve)(baseDir, source)]) ||
            findFirstMiddleware((config.sources || []).map((dir) => (0, path_1.resolve)(dir, source))) ||
            findFirstMiddleware([(0, path_1.resolve)(process.cwd(), source), (0, path_1.resolve)(info_1.rootDir, source)]);
        if (creator) {
            if (typeof creator.setup === 'function') {
                yield creator.setup(server, config);
            }
            if (typeof creator === 'function') {
                const handler = yield creator(...options);
                if (typeof handler === 'function') {
                    return {
                        options,
                        source,
                        active: true,
                        direction,
                        handler,
                    };
                }
            }
        }
        return undefined;
    });
}
function integrateMiddlewares(server) {
    if (server.middlewares.length) {
        const all = server.at('*');
        for (const middleware of server.middlewares) {
            all.any((req, res, next) => {
                if (middleware.active) {
                    if (middleware.direction === 'in') {
                        return middleware.handler(req, res, next);
                    }
                    else if (middleware.direction === 'out') {
                        res.middlewares.push(() => new Promise((resolve, reject) => {
                            try {
                                middleware.handler(req, res, resolve);
                            }
                            catch (e) {
                                reject(e);
                            }
                        }));
                        return next();
                    }
                }
                next();
            });
        }
    }
}
function withMiddlewares(server, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const middlewareDefinitions = config.middlewares || [];
        for (const definition of middlewareDefinitions) {
            const source = definition.source;
            const baseDir = definition.baseDir || config.directory;
            const options = definition.options || [];
            const direction = definition.direction || 'in';
            const middleware = yield createMiddleware(server, config, baseDir, source, direction, options);
            if (middleware) {
                server.middlewares.push(middleware);
            }
        }
        integrateMiddlewares(server);
    });
}
exports.withMiddlewares = withMiddlewares;
