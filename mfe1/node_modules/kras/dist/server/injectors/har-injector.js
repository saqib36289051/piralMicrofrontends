"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
function delay(value, time) {
    if (time) {
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(value), time);
        });
    }
    return value;
}
function ato(arr) {
    const obj = {};
    for (const item of arr || []) {
        obj[item.name] = item.value;
    }
    return obj;
}
function getUrl(url) {
    if (url.startsWith('http')) {
        return url.substr(url.indexOf('/', 9));
    }
    return url;
}
function findEntries(obj) {
    if (typeof obj === 'object' && obj.log && Array.isArray(obj.log.entries)) {
        return obj.log.entries;
    }
    return [];
}
class HarInjector {
    constructor(options, config) {
        this.files = [];
        const directory = options.directory || config.sources || config.directory;
        this.config = options;
        this.connectors = Object.keys(config.map)
            .filter((target) => config.map[target] !== false)
            .map((target) => ({
            target,
            address: config.map[target],
        }));
        this.watcher = (0, helpers_1.watch)(directory, '**/*.har', (ev, fileName, position) => {
            switch (ev) {
                case 'create':
                case 'update':
                    return this.load(fileName, position);
                case 'delete':
                    return this.unload(fileName);
            }
        });
    }
    getOptions() {
        return {
            delay: {
                description: `If active delays the responses with the time it took according to the HAR.`,
                title: `Delay Responses`,
                type: 'checkbox',
                value: this.config.delay || false,
            },
            directories: (0, helpers_1.editDirectoryOption)(this.watcher.directories),
            files: (0, helpers_1.editEntryOption)(this.files, ({ request }) => `${request.method} ${request.url}`),
        };
    }
    setOptions(options) {
        this.config.delay = options.delay;
        for (const { name, entries } of options.files) {
            const files = this.files.find((m) => m[0].file === name);
            if (entries) {
                for (let i = 0; i < entries.length; i++) {
                    const entry = entries[i];
                    const file = files[i];
                    if (file && typeof entry.active === 'boolean') {
                        file.active = entry.active;
                    }
                }
            }
        }
        this.watcher.directories = options.directories;
    }
    get name() {
        return 'har-injector';
    }
    get active() {
        return this.config.active;
    }
    set active(value) {
        this.config.active = value;
    }
    unload(fileName) {
        const index = this.files.findIndex((m) => m[0].file === fileName);
        if (index !== -1) {
            this.files.splice(index, 1);
        }
    }
    load(fileName, position) {
        const content = (0, helpers_1.asJson)(fileName, undefined);
        const entries = findEntries(content);
        const files = entries.map((entry) => this.transformEntry(fileName, entry));
        this.unload(fileName);
        if (files.length > 0) {
            this.files.splice(position, 0, files);
        }
    }
    findTarget(url) {
        for (const { target, address } of this.connectors) {
            if (url.indexOf(address) === 0) {
                return target;
            }
        }
        return undefined;
    }
    transformEntry(file, entry) {
        const original = entry.request;
        const response = entry.response;
        const request = {
            method: original.method,
            url: getUrl(original.url),
            target: original.target || this.findTarget(original.url),
            content: (original.postData || {}).text || '',
            headers: ato(original.headers),
            query: ato(original.queryString),
        };
        delete request.headers._;
        return {
            file,
            active: true,
            time: entry.time,
            request,
            response,
        };
    }
    dispose() {
        this.watcher.close();
    }
    handle(req) {
        let i = 0;
        for (const files of this.files) {
            for (const { file, active, time, request, response } of files) {
                if (active) {
                    const name = this.name;
                    if ((0, helpers_1.compareRequests)(request, req)) {
                        return delay((0, helpers_1.fromHar)(request.url, response, {
                            name,
                            file: {
                                name: file,
                                entry: i,
                            },
                        }), this.config.delay && time);
                    }
                }
                i++;
            }
        }
    }
}
exports.default = HarInjector;
