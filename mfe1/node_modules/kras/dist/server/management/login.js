"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userLogin = exports.getAuth = void 0;
const providers = __importStar(require("../auth"));
const url_1 = require("url");
const bearer = 'Bearer ';
function getAuth(server, config) {
    const auth = config.auth;
    const provider = auth && providers[auth.provider];
    if (provider) {
        return (server) => {
            const connectToFeed = server.feed;
            server.feed = (handler) => {
                connectToFeed((ws, req) => {
                    const { token } = (0, url_1.parse)(req.url, true).query;
                    if (!Array.isArray(token)) {
                        const valid = provider.validateToken(auth, token);
                        if (valid) {
                            return handler(ws, req);
                        }
                    }
                    ws.close();
                });
                return server;
            };
            return server.any((req, res, next) => {
                const header = req.header('authorization');
                if (header && header.startsWith(bearer)) {
                    const token = header.substring(bearer.length);
                    const valid = provider.validateToken(auth, token);
                    if (valid) {
                        return next();
                    }
                }
                return res.sendStatus(401);
            });
        };
    }
    return (server) => server;
}
exports.getAuth = getAuth;
function userLogin(server, config) {
    const auth = config.auth;
    const provider = auth && providers[auth.provider];
    return (req, res) => {
        const credentials = JSON.parse(req.body || '{}');
        const token = provider && provider.generateToken(auth, credentials);
        if (token) {
            res.json({ token });
        }
        else {
            res.sendStatus(403);
        }
    };
}
exports.userLogin = userLogin;
