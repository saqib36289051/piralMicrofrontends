// src/index.ts
import MagicString from "magic-string";
import { decode, encode } from "@jridgewell/sourcemap-codec";

// src/banner.ts
function modifyImports(ms, dependencies) {
  ms.replace(/\[.*?\]/, (s) => {
    dependencies.forEach((dep) => {
      const depRef = dep.requireId || dep.id;
      s = s.replace(`'${dep.name}'`, `'${depRef}'`);
    });
    return s;
  });
}
function prependBanner(ms, requireRef, dependencies, schema) {
  const deps = dependencies.reduce((deps2, dep) => {
    deps2[dep.id] = dep.ref;
    return deps2;
  }, {});
  if (schema === "v2") {
    ms.prepend(`//@pilet v:2(${requireRef},${JSON.stringify(deps)})
`);
  } else if (schema === "v3") {
    ms.prepend(`//@pilet v:3(${requireRef},${JSON.stringify(deps)})
`);
  }
}
function insertStylesheet(ms, name, debug, schema) {
  if (schema === "v2") {
    const bundleUrl = `function(){try{throw new Error}catch(t){const e=(""+t.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);if(e)return e[0].replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^\\/]+$/,"$1")+"/"}return"/"}`;
    const cssFiles = ["style.css"];
    const stylesheet = [
      `var d=document`,
      `var __bundleUrl__=(${bundleUrl})()`,
      `${JSON.stringify(cssFiles)}.forEach(cf=>{`,
      `  var u=__bundleUrl__+cf`,
      `  var e=d.createElement("link")`,
      `  e.setAttribute('data-origin', ${JSON.stringify(name)})`,
      `  e.type="text/css"`,
      `  e.rel="stylesheet"`,
      `  e.href=${debug ? 'u+"?_="+Math.random()' : "u"}`,
      `  d.head.appendChild(e)`,
      `})`
    ].join(";\n  ");
    const insertLink = `(function(){
  ${stylesheet};
})()`;
    const execute = "execute: (function () {";
    ms.replace(execute, `${execute}
${insertLink}`);
  } else if (schema === "v3") {
    const cssFiles = ["style.css"];
    const execute = "execute: (function () {";
    const insertLink = `exports("styles", ${JSON.stringify(cssFiles)})`;
    ms.replace(execute, `${execute}
${insertLink}`);
  }
}

// src/index.ts
function pilet({ id, debug, piletName, importmap, requireRef, schema }) {
  const cssFiles = [];
  return {
    name: "pilet",
    transform(_, id2) {
      if (id2.endsWith(".css") || id2.endsWith(".scss") || id2.endsWith(".sass")) {
        cssFiles.push(id2);
      }
    },
    generateBundle(_, bundle) {
      Object.keys(bundle).forEach((file) => {
        const asset = bundle[file];
        if (asset.type === "chunk" && asset.isEntry && asset.name === id) {
          const sm = bundle[`${file}.map`];
          const ms = new MagicString(asset.code);
          prependBanner(ms, requireRef, importmap, schema);
          asset.code = ms.toString();
          if (sm && "source" in sm && typeof sm.source === "string") {
            const map = JSON.parse(sm.source);
            const arr = decode(map.mappings);
            arr.unshift([]);
            map.mappings = encode(arr);
            sm.source = JSON.stringify(map);
          }
        }
      });
    },
    renderChunk(content, asset) {
      const ms = new MagicString(content);
      modifyImports(ms, importmap);
      if (asset.isEntry && asset.name === id && cssFiles.length) {
        insertStylesheet(ms, piletName, debug, schema);
      }
      return {
        code: ms.toString(),
        map: ms.generateMap({ hires: true })
      };
    }
  };
}
export {
  pilet as default
};
//# sourceMappingURL=index.mjs.map
